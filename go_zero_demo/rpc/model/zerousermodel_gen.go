// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	zeroUserFieldNames          = builder.RawFieldNames(&ZeroUser{})
	zeroUserRows                = strings.Join(zeroUserFieldNames, ",")
	zeroUserRowsExpectAutoSet   = strings.Join(stringx.Remove(zeroUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	zeroUserRowsWithPlaceHolder = strings.Join(stringx.Remove(zeroUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	zeroUserModel interface {
		Insert(ctx context.Context, data *ZeroUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ZeroUser, error)
		FindOneByUsername(ctx context.Context, username string) (*ZeroUser, error)
		Update(ctx context.Context, data *ZeroUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultZeroUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ZeroUser struct {
		Id       int64          `db:"id"`       // id
		Username string         `db:"username"` // username
		Password string         `db:"password"` // password
		Email    sql.NullString `db:"email"`    // email
	}
)

func newZeroUserModel(conn sqlx.SqlConn) *defaultZeroUserModel {
	return &defaultZeroUserModel{
		conn:  conn,
		table: "`zero_user`",
	}
}

func (m *defaultZeroUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultZeroUserModel) FindOne(ctx context.Context, id int64) (*ZeroUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", zeroUserRows, m.table)
	var resp ZeroUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultZeroUserModel) FindOneByUsername(ctx context.Context, username string) (*ZeroUser, error) {
	var resp ZeroUser
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", zeroUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultZeroUserModel) Insert(ctx context.Context, data *ZeroUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, zeroUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Email)
	return ret, err
}

func (m *defaultZeroUserModel) Update(ctx context.Context, newData *ZeroUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, zeroUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Email, newData.Id)
	return err
}

func (m *defaultZeroUserModel) tableName() string {
	return m.table
}
