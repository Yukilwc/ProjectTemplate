// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"blog/rpc/user/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	MsgResp       = user.MsgResp
	ReqAddUser    = user.ReqAddUser
	ReqLoginUser  = user.ReqLoginUser
	RespLoginUser = user.RespLoginUser
	UserId        = user.UserId
	UserInfo      = user.UserInfo

	User interface {
		Login(ctx context.Context, in *ReqLoginUser, opts ...grpc.CallOption) (*RespLoginUser, error)
		Add(ctx context.Context, in *ReqAddUser, opts ...grpc.CallOption) (*MsgResp, error)
		Get(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserInfo, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *ReqLoginUser, opts ...grpc.CallOption) (*RespLoginUser, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Add(ctx context.Context, in *ReqAddUser, opts ...grpc.CallOption) (*MsgResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}

func (m *defaultUser) Get(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}
